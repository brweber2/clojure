1) function: 

'function' <name> [ <params> ] <block>

translates to:

(defn <name> [ <params> ]
  <block>
)

2) block: { <exprs> }

translates to:

(do
  <expr 0>
  <expr 1>
  ...
  <expr n>
)

3) declaration: val <name> = <expr>

translates to:

(let [name <expr>]
  ; remaining code in block gets inserted here...
)

4.a) invocation: <name2> ( <args> )

translates to:

(name2 args)

4.b) invocation: <name1> . <name2> ( <args> )

translates to:

(name2 name1 <args>)

5) instantiation: new <name>( <args> )

(<name>. <args>)

6) type: < <name> >

#^{ :tag <name> }